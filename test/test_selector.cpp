#include "catch.hpp"
#include "utils.h"

TEST_CASE( "Behavior Tree Selector", "[bt_sel]" ) {
    VirtualMachine vm;
    MockSelector selector;
    SECTION( "()" ) {
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 0);
    }

    MockAction action_foo;
    selector.inner_node.children.push_back(action_foo.inner_node);
    SECTION( "(S)" ) {
        action_foo.update_result = BH_SUCCESS;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
    }

    SECTION( "(F)" ) {
        action_foo.update_result = BH_FAILURE;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
    }

    SECTION( "(R)" ) {
        action_foo.update_result = BH_RUNNING;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
    }

    MockAction action_bar;
    selector.inner_node.children.push_back(action_bar.inner_node);
    SECTION( "(F,F)" ) {
        action_foo.update_result = BH_FAILURE;
        action_bar.update_result = BH_FAILURE;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 4);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 2);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 2);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "(S,F)" ) {
        action_foo.update_result = BH_SUCCESS;
        action_bar.update_result = BH_FAILURE;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "(F,S)" ) {
        action_foo.update_result = BH_FAILURE;
        action_bar.update_result = BH_SUCCESS;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 4);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 2);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 2);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "(F,R)" ) {
        action_foo.update_result = BH_FAILURE;
        action_bar.update_result = BH_RUNNING;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 4);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 2);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "(F,R)->(S,R)" ) {
        action_foo.update_result = BH_FAILURE;
        action_bar.update_result = BH_RUNNING;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
        action_foo.update_result = BH_SUCCESS;
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 3);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 1);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "(R,F)->(F,F)" ) {
        action_foo.update_result = BH_RUNNING;
        action_bar.update_result = BH_FAILURE;
        to_vm(vm, selector.inner_node);
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
        action_foo.update_result = BH_FAILURE;
        vm.tick(nullptr);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 3);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    MockSelector root_selector;
    root_selector.inner_node.children.push_back(selector.inner_node);
    SECTION( "((F,F))" ) {
        to_vm(vm, root_selector.inner_node);
        action_foo.update_result = BH_FAILURE;
        action_bar.update_result = BH_FAILURE;
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_FAILURE);
        REQUIRE(root_selector.counter.prepare == 1);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 1);
        REQUIRE(root_selector.counter.child_update == 1);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_FAILURE);
        REQUIRE(root_selector.counter.prepare == 2);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 2);
        REQUIRE(root_selector.counter.child_update == 2);
        REQUIRE(selector.child_update_result == BH_FAILURE);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 4);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 2);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 2);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "((S,F))" ) {
        to_vm(vm, root_selector.inner_node);
        action_foo.update_result = BH_SUCCESS;
        action_bar.update_result = BH_FAILURE;
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_SUCCESS);
        REQUIRE(root_selector.counter.prepare == 1);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 1);
        REQUIRE(root_selector.counter.child_update == 1);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_SUCCESS);
        REQUIRE(root_selector.counter.prepare == 2);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 2);
        REQUIRE(root_selector.counter.child_update == 2);
        REQUIRE(selector.child_update_result == BH_SUCCESS);
        REQUIRE(selector.counter.prepare == 2);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "((R,S))" ) {
        to_vm(vm, root_selector.inner_node);
        action_foo.update_result = BH_RUNNING;
        action_bar.update_result = BH_SUCCESS;
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_RUNNING);
        REQUIRE(root_selector.counter.prepare == 1);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 1);
        REQUIRE(root_selector.counter.child_update == 1);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 1);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_RUNNING);
        REQUIRE(root_selector.counter.prepare == 1);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 2);
        REQUIRE(root_selector.counter.child_update == 2);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 0);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 0);
        REQUIRE(action_bar.counter.child_update == 0);
    }

    SECTION( "((F,R))" ) {
        to_vm(vm, root_selector.inner_node);
        action_foo.update_result = BH_FAILURE;
        action_bar.update_result = BH_RUNNING;
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_RUNNING);
        REQUIRE(root_selector.counter.prepare == 1);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 1);
        REQUIRE(root_selector.counter.child_update == 1);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 1);
        REQUIRE(selector.counter.child_update == 2);
        REQUIRE(action_foo.counter.prepare == 1);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 1);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 1);
        REQUIRE(action_bar.counter.child_update == 0);
        vm.tick(nullptr);
        REQUIRE(root_selector.child_update_result == BH_RUNNING);
        REQUIRE(root_selector.counter.prepare == 1);
        REQUIRE(root_selector.counter.abort == 0);
        REQUIRE(root_selector.counter.self_update == 2);
        REQUIRE(root_selector.counter.child_update == 2);
        REQUIRE(selector.child_update_result == BH_RUNNING);
        REQUIRE(selector.counter.prepare == 1);
        REQUIRE(selector.counter.abort == 0);
        REQUIRE(selector.counter.self_update == 2);
        REQUIRE(selector.counter.child_update == 4);
        REQUIRE(action_foo.counter.prepare == 2);
        REQUIRE(action_foo.counter.abort == 0);
        REQUIRE(action_foo.counter.self_update == 2);
        REQUIRE(action_foo.counter.child_update == 0);
        REQUIRE(action_bar.counter.prepare == 1);
        REQUIRE(action_bar.counter.abort == 0);
        REQUIRE(action_bar.counter.self_update == 2);
        REQUIRE(action_bar.counter.child_update == 0);
    }
}
